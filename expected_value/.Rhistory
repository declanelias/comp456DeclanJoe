kbl(caption = "Log Rank Table Comparing GDP Doubling Times for Democracies and Non-Democracies", col.names = c("Democracy Status","Number of Countries","Observed GDP Doubling Time","Expected GDP Doubling Time", "(O-E)^2/E", "(O-E)^2/V")) %>%
kable_classic_2()
testStat = 0.194 + 0.144
testStat
1 - pchisq( testStat , df=1 )
( 34/36.7 ) / ( 52/49.3 )
Lower <- 0.8783274*exp( -1.96*sqrt( 1/36.7 + 1/49.3 ) )
Upper <- 0.8783274*exp( 1.96*sqrt( 1/36.7 + 1/49.3) )
Lower
Upper
`Test Statistic` <- 0.338
`P-Value` <- 0.5609859
`Hazard Ratio Point Estimate` <- 0.8783274
`Hazard Ratio 95% Confidence Interval` <- "                [0.5728957-1.346596]"
LogOutTab<- data.frame(`Test Statistic`, `P-Value`, `Hazard Ratio Point Estimate` <- 0.8783274, `Hazard Ratio 95% Confidence Interval` <- "[0.5728957-1.346596]")
sorted.pop = sort(GovGDP$RuralPopulation)
quart = length(GovGDP$Threshold) * .25
for (i in 1:3) {
print(sorted.pop[quart * i])
}
library(survminer)
GovGDP = GovGDP %>% mutate( RuralPopulationCat = cut(RuralPopulation , c(0, 30.61, 44.229, 57.739, 100), labels = c("First Quartile", "Second Quartile", "Third Quartile", "Fourth Quartile"))  )
ruralkm = survfit( Surv(doublingTime, (status)) ~ RuralPopulationCat , conf.type = 'plain',  data = GovGDP  )
plot(ruralkm, col = c("blue", "red", "black", "green"))
ggsurvplot( ruralkm ,
data=GovGDP ,
legend.title="Pefcentage of Rural Pop",
legend.labs=c("[0, 30.61]","(30.61, 44.229]", "(44.229, 57.739]", "(57.739, 100]")
)
summary(ruralkm)
survdiff( Surv(doublingTime, (status)) ~ RuralPopulationCat, data = GovGDP )
`Quartile Status` <- c("[0, 30.61]","(30.61, 44.229]", "(44.229, 57.739]", "(57.739, 100]")
`Number of Countries` <- c(44,48, 48, 48)
`Observed Doubling Times` <- c(18,22,22,26)
`Expected Doubling Times` <- c(22,17.6,21.6,26.8)
`(O-E)^2/E` <- c(.71261, 1.08878, 0.00636, 0.02361)
`(O-E)^2/V` <- c(0.98553, 1.42192, 0.00871, 0.03562)
LRGovTable <- data.frame(`Quartile Status`,`Number of Countries`, `Observed Doubling Times`, `Expected Doubling Times`, `(O-E)^2/E`, `(O-E)^2/V` )
LRGovTable %>%
kbl(caption = "Log Rank Table Comparing GDP Doubling Times for Democracies and Non-Democracies", col.names = c("Democracy Status","Number of Countries","Observed GDP Doubling Time","Expected GDP Doubling Time", "(O-E)^2/E", "(O-E)^2/V")) %>%
kable_classic_2()
0.71261 + 1.08878 + 0.00636 + 0.02361
1 - pchisq(1.83136, 3)
survreg(Surv(doublingTime, (status)) ~ RuralPopulationCat, data = GovGDP, dist = "gaussian")
norm.0 = function(x) {
return(1 - pnorm(x, mean = 34.451465, sd = 16.47092 ))
}
norm.1 = function(x) {
return(1 - pnorm(x, mean = 34.451465 - 5.585870, sd = 16.47092 ))
}
norm.2 = function(x) {
return(1 - pnorm(x, mean = 34.451465 - 3.645804, sd = 16.47092 ))
}
norm.3 = function(x) {
return(1 - pnorm(x, mean = 34.451465 - 1.798188 , sd = 16.47092 ))
}
survreg(Surv(doublingTime, (status)) ~ RuralPopulationCat, data = GovGDP, dist = "weibull")
weib.0 = function(x) {
return(1 - pweibull(x, 1 / 0.5648869, exp(3.71324838)))
}
weib.1 = function(x) {
return(1 - pweibull(x, 1 / 0.5648869, exp(3.71324838-0.24424897)))
}
weib.2 = function(x) {
return(1 - pweibull(x, 1 / 0.5648869, exp(3.71324838-0.09063327 )))
}
weib.3 = function(x) {
return(1 - pweibull(x, 1 / 0.5648869, exp(3.71324838-0.03270807  )))
}
survreg(Surv(doublingTime, (status)) ~ RuralPopulationCat, data = GovGDP, dist = "exponential")
exp.0 = function(x) {
return(1 - pexp(x, 1 / ( 3.9838267  )))
}
exp.1 = function(x) {
return(1 - pexp(x, 1 / ( 3.9838267 - 0.3040798 )))
}
exp.2 = function(x) {
return(1 - pexp(x, 1 / ( 3.9838267 - 0.1502568  )))
}
exp.3 = function(x) {
return(1 - pexp(x, 1 / ( 3.9838267 - 0.1814469  )))
}
km.0 = survfit( Surv(doublingTime, (status)) ~ 1 , conf.type = 'plain',  data = GovGDP %>% filter(RuralPopulationCat == "First Quartile"))
km.1 = survfit( Surv(doublingTime, (status)) ~ 1 , conf.type = 'plain',  data = GovGDP %>% filter(RuralPopulationCat == "Second Quartile"))
km.2 = survfit( Surv(doublingTime, (status)) ~ 1 , conf.type = 'plain',  data = GovGDP %>% filter(RuralPopulationCat == "Third Quartile"))
km.3 = survfit( Surv(doublingTime, (status)) ~ 1 , conf.type = 'plain',  data = GovGDP %>% filter(RuralPopulationCat == "Fourth Quartile"))
par(mfrow = c(2,2),
mar = c(0,0,2,1))
plot(km.0, conf.int = FALSE, ylab="GDP Doubling Probability" , xlab="Years", main = "First Quartile")
curve(norm.0, add = TRUE, col = "red")
curve(weib.0, add = TRUE, col = "blue")
curve(exp.0, add = TRUE, col = "green")
legend(1,0.3,c("Kaplan-Meier","Normal Model", "Weibull Model", "Exponential Model"),col=c("black","red", "blue", "green") , text.col=c("black","red", "blue", "green") , lty=1 , cex=0.8 )
plot(km.1, conf.int = FALSE, ylab="GDP Doubling Probability" , xlab="Years", main = "Second Quartile")
curve(norm.1, add = TRUE, col = "red")
curve(weib.1, add = TRUE, col = "blue")
curve(exp.1, add = TRUE, col = "green")
legend(1,0.3,c("Kaplan-Meier","Normal Model", "Weibull Model", "Exponential Model"),col=c("black","red", "blue", "green") , text.col=c("black","red", "blue", "green") , lty=1 , cex=0.8 )
plot(km.2, conf.int = FALSE, ylab="GDP Doubling Probability" , xlab="Years", main = "Third Quartile")
curve(norm.2, add = TRUE, col = "red")
curve(weib.2, add = TRUE, col = "blue")
curve(exp.2, add = TRUE, col = "green")
legend(1,0.3,c("Kaplan-Meier","Normal Model", "Weibull Model", "Exponential Model"),col=c("black","red", "blue", "green") , text.col=c("black","red", "blue", "green") , lty=1 , cex=0.8 )
plot(km.3, conf.int = FALSE, ylab="GDP Doubling Probability" , xlab="Years", main = "Fourth Quartile")
curve(norm.3, add = TRUE, col = "red")
curve(weib.3, add = TRUE, col = "blue")
curve(exp.3, add = TRUE, col = "green")
legend(1,0.3,c("Kaplan-Meier","Normal Model", "Weibull Model", "Exponential Model"),col=c("black","red", "blue", "green") , text.col=c("black","red", "blue", "green") , lty=1 , cex=0.8 )
survreg(Surv(doublingTime, (status)) ~ RuralPopulationCat, data = GovGDP, dist = "exponential")
m.exp = survreg(Surv(doublingTime, (status)) ~ RuralPopulationCat, data = GovGDP, dist = "exponential")
summary(m.exp)
CoxSnell = function( cs, status, xlim=NULL, ylim=NULL )
{
kmcs = survfit( Surv(jitter(cs,amount=(max(cs)-min(cs))/1000),status) ~ 1 )$surv
plot( log(-log(kmcs)) ~ sort(log(cs)) ,
xlab="log(Cox-Snell)", ylab="log(-log(S(Cox-Snell)))", xlim=xlim, ylim=ylim )
abline( 0, 1, col='red' )
}
?pexp
View(GovGDP)
m.exp = survreg(Surv(doublingTime, (status)) ~ RuralPopulation, data = GovGDP, dist = "exponential")
summary(m.exp)
m.exp = survreg(Surv(doublingTime, (status)) ~ RuralPopulation * Threshold, data = GovGDP, dist = "exponential")
summary(m.exp)
m.exp = survreg(Surv(doublingTime, (status)) ~ RuralPopulation, data = GovGDP, dist = "exponential")
summary(m.exp)
CoxSnell = function( cs, status, xlim=NULL, ylim=NULL )
{
kmcs = survfit( Surv(jitter(cs,amount=(max(cs)-min(cs))/1000),status) ~ 1 )$surv
plot( log(-log(kmcs)) ~ sort(log(cs)) ,
xlab="log(Cox-Snell)", ylab="log(-log(S(Cox-Snell)))", xlim=xlim, ylim=ylim )
abline( 0, 1, col='red' )
}
CS = -log( 1-pexp( GovGDP$doublingTime , rate =  1 / exp(3.70341 + 0.00213)) )
CoxSnell(CS, GovGDP$status)
m.exp = survreg(Surv(doublingTime, (status)) ~ RuralPopulation, data = GovGDP, dist = "weibull")
m.weib = survreg(Surv(doublingTime, (status)) ~ RuralPopulation, data = GovGDP, dist = "weibull")
summary(m.exp)
summary(m.weib)
CS = -log( 1-pexp( GovGDP$doublingTime , shape =  1 / .57, scale = exp(3.46133 + .00329)) )
CS = -log( 1-pweibull( GovGDP$doublingTime , shape =  1 / .57, scale = exp(3.46133 + .00329)) )
CoxSnell(CS, GovGDP$status)
m.ln = survreg(Surv(doublingTime, (status)) ~ RuralPopulation, data = GovGDP, dist = "lognormal")
summary(m.ln)
CS = -log( 1-plnorm( GovGDP$doublingTime , 3.28996 + .00119, .763 ) )
CS = -log( 1-plnorm( GovGDP$doublingTime , 3.28996 + .00119, .763 ) )
CoxSnell(CS, GovGDP$status)
summary(m.ln)
2 * (-414.3 - (-414.4))
1 - pchisq(.2, 1)
# Weibull
2 * (3 - (-418.3 ))
# Log-Normal
2 * (3 - (-414.3))
2 * (3 - (-418.3 ))
# Log-Normal
2 * (3 - (-414.3))
m.norm = survreg(Surv(doublingTime, (status)) ~ RuralPopulation, data = GovGDP, dist = "exponential")
summary(m.norm)
m.norm = survreg(Surv(doublingTime, (status)) ~ RuralPopulation, data = GovGDP, dist = "gaussian")
summary(m.norm)
CS = -log(1-pnorm( GovGDP$doublingTime , mean = 29.1686 + 0.0465, sd = 16.5) )
CoxSnell(CS, GovGDP$status)
CSnorm = CoxSnell(CS, GovGDP$status)
CS = -log(1-pnorm( GovGDP$doublingTime , mean = 29.1686 + 0.0465, sd = 16.5) )
CSnorm = CoxSnell(CS, GovGDP$status)
CSnorm
CoxSnell(CS, GovGDP$status)
LRGovTable %>%
kbl(caption = "Log Rank Table Comparing GDP Doubling Times for Democracies and Non-Democracies", col.names = c("Democracy Status","Number of Countries","Observed GDP Doubling Time","Expected GDP Doubling Time", "(O-E)^2/E", "(O-E)^2/V")) %>%
kable_classic_2()
LRGovTable %>%
kbl(caption = "Log Rank Table Comparing GDP Doubling Times for RuralPopulationCat Quartiles", col.names = c("Rural Population Category","Number of Countries","Observed GDP Doubling Time","Expected GDP Doubling Time", "(O-E)^2/E", "(O-E)^2/V")) %>%
kable_classic_2()
LRGovTable %>%
kbl(caption = "Log Rank Table Comparing GDP Doubling Times for RuralPopulationCat Quartiles", col.names = c("Rural Population Category","Number of Countries","Observed GDP Doubling Time","Expected GDP Doubling Time", "(O-E)^2/E", "(O-E)^2/V")) %>%
kable_classic_2()
knitr::opts_chunk$set(echo = TRUE)
source("data_scraper.R")
library(dplyr)
library(httr)
library(urltools)
library(tidyverse)
library(purrr)
load_book = function(league) {
file = paste("betting_data/", league, "_raw.rdata", sep = "")
env = new.env()
nm = load(file, env)
return(env[[nm]])
}
load_book = function(league) {
file = paste("betting_data/", league, "_raw.rdata", sep = "")
env = new.env()
nm = load(file, env)
return(env[[nm]])
}
line.to.prob = function(line) {
if_else(line < 0,
abs(line) / (abs(line) + 100) * 100,
100 / (line + 100) * 100)
}
prob.to.line = function(prob) {
if_else(prob > .5,
-1 * prob * 100 / (1 - prob),
100 / prob- 100)
}
implied.prob = function(line1, line2) {
prob1 = line.to.prob(line1)
prob2 = line.to.prob(line2)
return(prob1 / (prob1 + prob2))
}
ncaaf_raw = load_book("ncaaf")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(lubridate)
ncaaf_raw = ncaaf_raw %>%
filter(type == "game")
ncaaf_ml = ncaaf_raw %>%
select(-c(teams, draw, total, away_total, away_over, away_under, home_total,
home_over, home_under, ml_home_public, ml_away_public, ml_home_money,
ml_away_money, spread_away_money, line_status, spread_away, spread_home,
spread_away_line, spread_home_line, over, under))
ncaaf_ml = ncaaf_ml %>%
filter(!is.na(winning_team_id))
ncaaf_ml = ncaaf_ml %>%
mutate(home_prob_fair = implied.prob(ml_home, ml_away),
away_prob_fair = 1 - home_prob_fair,
home_team_win = if_else(winning_team_id == home_team_id, TRUE, FALSE),
home_prob_vig = line.to.prob(ml_home) / 100,
away_prob_vig = line.to.prob(ml_away) / 100)
View(ncaaf_ml)
ncaaf_ml = ncaaf_ml %>%
mutate(inserted = ymd_hms(inserted))
ncaaf_ml = ncaaf_ml %>%
mutate(inserted = ymd_hms(inserted),
start_time = ymd_hms(inserted))
ncaaf_ml %>%
select(c(inserted, start_time))
ncaaf_ml %>%
select(c(inserted, start_time)) %>%
view()
ncaaf_ml = ncaaf_raw %>%
select(-c(teams, draw, total, away_total, away_over, away_under, home_total,
home_over, home_under, ml_home_public, ml_away_public, ml_home_money,
ml_away_money, spread_away_money, line_status, spread_away, spread_home,
spread_away_line, spread_home_line, over, under))
ncaaf_ml = ncaaf_ml %>%
filter(!is.na(winning_team_id))
ncaaf_ml = ncaaf_ml %>%
mutate(home_prob_fair = implied.prob(ml_home, ml_away),
away_prob_fair = 1 - home_prob_fair,
home_team_win = if_else(winning_team_id == home_team_id, TRUE, FALSE),
home_prob_vig = line.to.prob(ml_home) / 100,
away_prob_vig = line.to.prob(ml_away) / 100)
ncaaf_ml = ncaaf_ml %>%
mutate(inserted = ymd_hms(inserted),
start_time = ymd_hms(start_time))
ncaaf_ml %>%
select(c(inserted, start_time)) %>%
view()
ncaaf_ml %>%
select(c(inserted, start_time, ml_home, ml_away)) %>%
view()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
load("betting_data/book_id_data.rdata")
View(BOOK_ID_DATA)
ncaaf_ml_leagal = ncaaf_ml %>%
left_join(
BOOK_ID_DATA %>%
mutate(book_id = id)
select(c(book_id, is_legal)),
ncaaf_ml_leagal = ncaaf_ml %>%
left_join(
BOOK_ID_DATA %>%
mutate(book_id = id) %>%
select(c(book_id, is_legal)),
by = book_id
)
BOOK_ID_DATA %>%
mutate(book_id = id)
BOOK_ID_DATA %>%
mutate(book_id = id) %>%
select(c(book_id, is_legal)
left_join(
BOOK_ID_DATA %>%
mutate(book_id = id) %>%
select(c(book_id, is_legal))
BOOK_ID_DATA %>%
mutate(book_id = id) %>%
select(c(book_id, is_legal))
ncaaf_ml_leagal = ncaaf_ml %>%
left_join(
BOOK_ID_DATA %>%
mutate(book_id = id) %>%
select(c(book_id, is_legal)),
by = book_id
)
left_join( ncaaf_ml,
BOOK_ID_DATA %>%
mutate(book_id = id) %>%
select(c(book_id, is_legal)),
by = "book_id")
ncaaf_legal = left_join( ncaaf_ml,
BOOK_ID_DATA %>%
mutate(book_id = id) %>%
select(c(book_id, is_legal)),
by = "book_id")
ncaaf_legal %>%
filter(!is.na(ml_home)) %>%
group_by(id) %>%
summarise(median = median(home_prob_fair),
mean = mean(home_prob_fair),
sd = sd(home_prob_fair),
dif = max(home_prob_fair) - min(home_prob_fair),
sum(na.omit(num_bets)),
n()) %>%
view()
ncaaf_legal =
left_join( ncaaf_ml,
BOOK_ID_DATA %>%
mutate(book_id = id) %>%
select(c(book_id, is_legal, display_name)),
by = "book_id")
ncaaf_legal %>%
filter(!is.na(ml_home)) %>%
group_by(id) %>%
summarise(dif = max(home_prob_fair) - min(home_prob_fair),
sum(na.omit(num_bets)),
n()) %>%
view()
ncaaf_legal %>%
filter(id == 69896)
ncaaf_legal =
left_join( ncaaf_ml,
BOOK_ID_DATA %>%
mutate(book_id = id) %>%
select(c(book_id, is_legal, display_name)),
by = "book_id") %>%
filter(is_legal == TRUE)
ncaaf_legal %>%
filter(!is.na(ml_home)) %>%
group_by(id) %>%
summarise(dif = max(home_prob_fair) - min(home_prob_fair),
sum(na.omit(num_bets)),
n()) %>%
view()
ncaaf_legal %>%
filter(id == 105766)
ncaaf_legal %>%
filter(id == 103047)
ncaaf_legal %>%
filter(id == 29374)
ncaaf_legal %>%
filter(id == 103110)
ncaaf_legal %>%
filter(id == 105766)
test = ncaaf_legal %>%
filter(id == 105766,
id == 69674)
test
test = ncaaf_legal %>%
filter(id == 105766 | id == 69674)
test
test = ncaaf_legal %>%
filter(id == 105646)
test
ymd_hms("2021-12-05 04:16:03")
ymd_hms("2021-12-05 04:16:03") > ymd_hms("2021-12-05 03:16:03")
ymd_hms("2021-12-05 04:16:03") > ymd_hms("2021-12-05 05:16:03")
ymd_hms("2021-12-05 04:16:03") - ymd_hms("2021-12-05 03:16:03")
class(ymd_hms("2021-12-05 04:16:03") - ymd_hms("2021-12-05 03:16:03"))
ymd_hms("2021-12-05 04:16:03") - ymd_hms("2021-12-05 03:16:02")
(ymd_hms("2021-12-05 04:16:03") - ymd_hms("2021-12-05 03:16:02"))[1]
(ymd_hms("2021-12-05 04:16:03") - ymd_hms("2021-12-05 03:16:02")) + 1
(ymd_hms("2021-12-05 04:16:03") - ymd_hms("2021-12-05 03:16:02")) * 3
(ymd_hms("2021-12-05 04:16:03") - ymd_hms("2021-12-05 03:16:02")) > 1
(ymd_hms("2021-12-05 04:16:03") - ymd_hms("2021-12-05 03:16:02")) <1
(ymd_hms("2021-12-05 04:16:03") - ymd_hms("2021-12-05 03:16:02"))
(ymd_hms("2021-12-05 04:16:03") - ymd_hms("2021-12-05 06:16:02"))
(ymd_hms("2021-12-05 04:16:03") * ymd_hms("2021-12-05 06:16:02"))
(ymd_hms("2021-12-05 04:16:03") + ymd_hms("2021-12-05 06:16:02"))
(ymd_hms("2021-12-05 04:16:03") +- ymd_hms("2021-12-05 06:16:02"))
(ymd_hms("2021-12-05 04:16:03") - ymd_hms("2021-12-05 06:16:02"))
(ymd_hms("2021-12-05 04:16:03") - ymd_hms("2021-12-05 02:16:02"))
ncaaf_ml = ncaaf_ml %>%
filter(if (start_time - inserted < 5))
ncaaf_ml = ncaaf_ml %>%
filter(start_time - inserted < 5)
ncaaf_legal %>%
filter(!is.na(ml_home)) %>%
group_by(id) %>%
summarise(dif = max(home_prob_fair) - min(home_prob_fair),
sum(na.omit(num_bets)),
n()) %>%
view()
ncaaf_ml = ncaaf_raw %>%
select(-c(teams, draw, total, away_total, away_over, away_under, home_total,
home_over, home_under, ml_home_public, ml_away_public, ml_home_money,
ml_away_money, spread_away_money, line_status, spread_away, spread_home,
spread_away_line, spread_home_line, over, under))
ncaaf_ml = ncaaf_ml %>%
filter(!is.na(winning_team_id))
ncaaf_ml = ncaaf_ml %>%
mutate(home_prob_fair = implied.prob(ml_home, ml_away),
away_prob_fair = 1 - home_prob_fair,
home_team_win = if_else(winning_team_id == home_team_id, TRUE, FALSE),
home_prob_vig = line.to.prob(ml_home) / 100,
away_prob_vig = line.to.prob(ml_away) / 100)
ncaaf_ml = ncaaf_ml %>%
mutate(inserted = ymd_hms(inserted),
start_time = ymd_hms(start_time))
ncaaf_ml %>%
select(c(inserted, start_time, ml_home, ml_away)) %>%
view()
ncaaf_legal =
left_join( ncaaf_ml,
BOOK_ID_DATA %>%
mutate(book_id = id) %>%
select(c(book_id, is_legal, display_name)),
by = "book_id") %>%
filter(is_legal == TRUE)
ncaaf_ml %>%
group_by(id) %>%
summarise(dif = max(away_prob_fair) - min(away_prob_fair))
ncaaf_ml %>%
group_by(id) %>%
summarise(dif = max(away_prob_fair) - min(away_prob_fair)) %>%
view()
ncaaf_ml %>%
group_by(id) %>%
summarise(dif = max(home_prob_fair) - min(home_prob_fair)) %>%
view()
ncaaf_ml %>%
filter(id == 87767)
ncaaf_ml %>%
group_by(id) %>%
summarise(dif = max(home_prob_fair) - min(home_prob_fair)) %>%
view()
ncaaf_ml %>%
group_by(id) %>%
summarise(dif = max(home_prob_fair) - min(home_prob_fair)) %>%
view()
ncaaf_ml %>%
group_by(id) %>%
summarise(dif = omit.na(max(home_prob_fair) - min(home_prob_fair))) %>%
view()
?na.omit
na.omit(sum(c(NA,NA,2,3)))
na.omit(sum(c(NA,NA,2,3)))[1]
ncaaf_ml %>%
group_by(id) %>%
summarise(dif = max(na.omit(home_prob_fair)) - min(na.omit(home_prob_fair))) %>%
view()
ncaaf_ml %>%
filter(id == 28837)
ncaaf_ml %>%
filter(id == 105443)
view()
ncaaf_ml %>%
group_by(id) %>%
summarise(max_dif = max(na.omit(home_prob_fair)) - mean(na.omit(home_prob_fair)),
min_dif = max(na.omit(home_prob_fair)) - mean(na.omit(home_prob_fair))) %>%
view()
ncaaf_ml %>%
group_by(id) %>%
summarise(max_dif = max(na.omit(home_prob_fair)) - mean(na.omit(home_prob_fair)),
min_dif = min(na.omit(home_prob_fair)) - mean(na.omit(home_prob_fair))) %>%
view()
ncaaf_ml %>%
filter(id == 105766)
ncaaf_ml %>%
group_by(season, book_id) %>%
summarise(n())
?switch
switch()
consensus_ml = ncaaf_ml %>%
filter(book_id == 15)
consensus_ml
?mutate_if
get_consensus_win_prob = function(this.id) {
return(consensus_ml %>%
filter(book_id == 15,
id == this.id) %>%
home_prob_fair)
}
get_consensus_win_prob(105579)
get_consensus_win_prob = function(this.id) {
return(consensus_ml %>%
filter(book_id == 15,
id == this.id) %>%
get(105579))
}
get_consensus_win_prob(105579)
get_consensus_win_prob = function(this.id) {
return((consensus_ml %>%
filter(book_id == 15,
id == this.id))$home_prob_fair)
}
get_consensus_win_prob(105579)
ncaaf_ml %>%
group_by(id) %>%
mutate(temp_var = if_else(
abs(home_prob_fair - get_consensus_win_prob(id)) > .2,
home_prob_fair,
0))
ncaaf_ml %>%
group_by(id, book_id) %>%
mutate(temp_var = if_else(
abs(home_prob_fair - get_consensus_win_prob(id)) > .2,
home_prob_fair,
0))
